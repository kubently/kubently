[project]
name = "kubently"
version = "0.0.1"
description = "Kubently - Troubleshooting Kubernetes Agentically"
authors = [
    { name = "Kubently Team", email = "team@kubently.io" }
]
readme = "README.md"
requires-python = ">=3.13"
license = { text = "Apache-2.0" }
keywords = ["kubernetes", "debugging", "fastapi", "redis", "a2a"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Topic :: System :: Systems Administration",
    "Topic :: Software Development :: Debuggers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Framework :: FastAPI",
    "Operating System :: OS Independent",
]

dependencies = [
    # Core Framework
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    
    # Redis
    "redis>=5.2.0",
    
    # Data Validation
    "pydantic>=2.10.0",
    "pydantic-settings>=2.6.0",
    
    # Utilities
    "python-dotenv>=1.0.1",
    "PyYAML>=6.0",
    
    # Agent dependencies
    "requests>=2.32.0",
    "httpx>=0.27.0",
    
    # Authentication & Security
    "PyJWT[crypto]>=2.8.0",
    "cryptography>=42.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "black>=24.10.0",
    "pre-commit>=4.0.0",
]

test = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "httpx>=0.27.0",
    "faker>=33.0.0",
]

docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.27.0",
]

a2a = [
    # A2A Protocol and LangGraph Dependencies
    "a2a-python==0.0.1",
    "a2a-sdk==0.3.10",
    "pydantic>=2.0.0",
    "uvicorn>=0.24.0",
    "starlette>=0.31.0",
    "python-dotenv>=1.0.0",
    "click>=8.0.0",
    
    # LangGraph and LangChain
    "langgraph>=0.2.0",
    "langgraph-checkpoint-redis>=0.1.0",
    "langchain>=0.3.0",
    "langchain-core>=0.3.0",
    "langchain-community>=0.3.0",
    "langchain-anthropic>=0.3.21",  # v0.3.21+ required for context management support
    "langchain-openai>=0.2.0",
    "langsmith>=0.1.0",  # Production tracing and observability
    
    # LLM Provider Support
    "cnoe-agent-utils>=0.1.0",
    "anthropic>=0.40.0",
    "openai>=1.50.0",
    
    # Optional MCP support
    "langchain-mcp-adapters>=0.1.0",
    
    # Async support
    "aiohttp>=3.9.0",
    "typing-extensions>=4.8.0",
]

[project.scripts]
kubently-api = "kubently.api.main:run"
kubently-agent = "kubently.agent.agent:main"

[project.urls]
Homepage = "https://github.com/kubently/kubently"
Documentation = "https://kubently.io/docs"
Repository = "https://github.com/kubently/kubently.git"
Issues = "https://github.com/kubently/kubently/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["kubently"]

[tool.ruff]
target-version = "py313"
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C90",  # mccabe complexity
    "UP",   # pyupgrade
    "SIM",  # flake8-simplify
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["kubently"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = """
    -ra
    --strict-markers
    --cov=kubently
    --cov-report=term-missing
    --cov-report=html
    --cov-report=xml
"""

[tool.coverage.run]
source = ["kubently"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[tool.black]
line-length = 100
target-version = ["py313"]
include = '\.pyi?$'

[tool.uv]
# Use uv for dependency management
dev-dependencies = [
    "ipython>=8.31.0",
    "ipdb>=0.13.13",
]